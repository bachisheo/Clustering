// <auto-generated />
using System;
using Clustering.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clustering.Migrations
{
    [DbContext(typeof(ClusteringContext))]
    partial class ClusteringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("CleanObjectCluster", b =>
                {
                    b.Property<int>("CleanObjectsCleanObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClustersClusterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CleanObjectsCleanObjectId", "ClustersClusterId");

                    b.HasIndex("ClustersClusterId");

                    b.ToTable("CleanObjectCluster");
                });

            modelBuilder.Entity("Clustering.Objects.CleanObject", b =>
                {
                    b.Property<int>("CleanObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CleanSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RawObjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CleanObjectId");

                    b.HasIndex("CleanSetId");

                    b.HasIndex("RawObjectId");

                    b.ToTable("CleanObjects");
                });

            modelBuilder.Entity("Clustering.Objects.CleanSet", b =>
                {
                    b.Property<int>("CleanSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CleanSetId");

                    b.ToTable("CleanSets");
                });

            modelBuilder.Entity("Clustering.Objects.Cluster", b =>
                {
                    b.Property<int>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ResultClusteringResultId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClusterId");

                    b.HasIndex("ResultClusteringResultId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Clustering.Objects.ClusteringResult", b =>
                {
                    b.Property<int>("ClusteringResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultName")
                        .HasColumnType("TEXT");

                    b.HasKey("ClusteringResultId");

                    b.ToTable("ClusteringResults");
                });

            modelBuilder.Entity("Clustering.Objects.RawObject", b =>
                {
                    b.Property<int>("RawObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RawSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RawObjectId");

                    b.HasIndex("RawSetId");

                    b.ToTable("RawObjects");
                });

            modelBuilder.Entity("Clustering.Objects.RawSet", b =>
                {
                    b.Property<int>("RawSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasKey("RawSetId");

                    b.ToTable("RawSets");
                });

            modelBuilder.Entity("CleanObjectCluster", b =>
                {
                    b.HasOne("Clustering.Objects.CleanObject", null)
                        .WithMany()
                        .HasForeignKey("CleanObjectsCleanObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clustering.Objects.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clustering.Objects.CleanObject", b =>
                {
                    b.HasOne("Clustering.Objects.CleanSet", "CleanSet")
                        .WithMany("CleanObjects")
                        .HasForeignKey("CleanSetId");

                    b.HasOne("Clustering.Objects.RawObject", "RawObject")
                        .WithMany("CleanObjects")
                        .HasForeignKey("RawObjectId");

                    b.Navigation("CleanSet");

                    b.Navigation("RawObject");
                });

            modelBuilder.Entity("Clustering.Objects.Cluster", b =>
                {
                    b.HasOne("Clustering.Objects.ClusteringResult", "Result")
                        .WithMany("Clusters")
                        .HasForeignKey("ResultClusteringResultId");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Clustering.Objects.RawObject", b =>
                {
                    b.HasOne("Clustering.Objects.RawSet", "RawSet")
                        .WithMany("RawObjects")
                        .HasForeignKey("RawSetId");

                    b.Navigation("RawSet");
                });

            modelBuilder.Entity("Clustering.Objects.CleanSet", b =>
                {
                    b.Navigation("CleanObjects");
                });

            modelBuilder.Entity("Clustering.Objects.ClusteringResult", b =>
                {
                    b.Navigation("Clusters");
                });

            modelBuilder.Entity("Clustering.Objects.RawObject", b =>
                {
                    b.Navigation("CleanObjects");
                });

            modelBuilder.Entity("Clustering.Objects.RawSet", b =>
                {
                    b.Navigation("RawObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
